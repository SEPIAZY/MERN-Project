{"ast":null,"code":"import axios from 'axios';\nimport jwt_decode from 'jwt-decode';\n\n//axios.defaults.baseURL = process.env.REACT_APP_SERVER_DOMAIN;\n\n/** Make API Requests */\n\n/** To get username from Token */\nexport async function getUsername() {\n  const token = localStorage.getItem('token');\n  if (!token) return Promise.reject(\"Cannot find Token\");\n  let decode = jwt_decode(token);\n  return decode;\n}\n\n/** authenticate function */\nexport async function authenticate(username) {\n  try {\n    return await axios.post('http://localhost:8080/api/authenticate', {\n      username\n    });\n  } catch (error) {\n    return {\n      error: \"Username doesn't exist...!\"\n    };\n  }\n}\n\n/** get User details */\nexport async function getUser(_ref) {\n  let {\n    username\n  } = _ref;\n  try {\n    const {\n      data\n    } = await axios.get(`http://localhost:8080/api/user/${username}`);\n    return {\n      data\n    };\n  } catch (error) {\n    return {\n      error: \"Password doesn't Match...!\"\n    };\n  }\n}\n\n/** register user function */\nexport async function registerUser(credentials) {\n  try {\n    console.log(\"check\");\n    console.log(credentials);\n    const {\n      data: {\n        msg\n      },\n      status\n    } = await axios.post(`http://localhost:8080/api/register`, credentials);\n    let {\n      username,\n      email\n    } = credentials;\n\n    /** send email */\n    if (status === 201) {\n      await axios.post('http://localhost:8080/api/registerMail', {\n        username,\n        userEmail: email,\n        text: msg\n      });\n    }\n    return Promise.resolve(msg);\n  } catch (error) {\n    return Promise.reject({\n      error\n    });\n  }\n}\n\n/** login function */\nexport async function verifyPassword(_ref2) {\n  let {\n    username,\n    password\n  } = _ref2;\n  try {\n    if (username) {\n      console.log(\"check\");\n      const {\n        data\n      } = await axios.post('http://localhost:8080/api/login', {\n        username,\n        password\n      });\n      return Promise.resolve({\n        data\n      });\n    }\n  } catch (error) {\n    return Promise.reject({\n      error: \"Password doesn't Match...!\"\n    });\n  }\n}\n\n/** update user profile function */\nexport async function updateUser(response) {\n  try {\n    const token = await localStorage.getItem('token');\n    const data = await axios.put('http://localhost:8080/api/updateuser', response, {\n      headers: {\n        \"Authorization\": `Bearer ${token}`\n      }\n    });\n    return Promise.resolve({\n      data\n    });\n  } catch (error) {\n    return Promise.reject({\n      error: \"Couldn't Update Profile...!\"\n    });\n  }\n}\n\n/** generate OTP */\nexport async function generateOTP(username) {\n  try {\n    const {\n      data: {\n        code\n      },\n      status\n    } = await axios.get('http://localhost:8080/api/generateOTP', {\n      params: {\n        username\n      }\n    });\n\n    // send mail with the OTP\n    if (status === 201) {\n      let {\n        data: {\n          email\n        }\n      } = await getUser({\n        username\n      });\n      let text = `Your Password Recovery OTP is ${code}. Verify and recover your password.`;\n      await axios.post('http://localhost:8080/api/registerMail', {\n        username,\n        userEmail: email,\n        text,\n        subject: \"Password Recovery OTP\"\n      });\n    }\n    return Promise.resolve(code);\n  } catch (error) {\n    return Promise.reject({\n      error\n    });\n  }\n}\n\n/** verify OTP */\nexport async function verifyOTP(_ref3) {\n  let {\n    username,\n    code\n  } = _ref3;\n  try {\n    const {\n      data,\n      status\n    } = await axios.get('http://localhost:8080/api/verifyOTP', {\n      params: {\n        username,\n        code\n      }\n    });\n    return {\n      data,\n      status\n    };\n  } catch (error) {\n    return Promise.reject(error);\n  }\n}\n\n/** reset password */\nexport async function resetPassword(_ref4) {\n  let {\n    username,\n    password\n  } = _ref4;\n  try {\n    const {\n      data,\n      status\n    } = await axios.put('http://localhost:8080/api/resetPassword', {\n      username,\n      password\n    });\n    return Promise.resolve({\n      data,\n      status\n    });\n  } catch (error) {\n    return Promise.reject({\n      error\n    });\n  }\n}","map":{"version":3,"names":["axios","jwt_decode","getUsername","token","localStorage","getItem","Promise","reject","decode","authenticate","username","post","error","getUser","data","get","registerUser","credentials","console","log","msg","status","email","userEmail","text","resolve","verifyPassword","password","updateUser","response","put","headers","generateOTP","code","params","subject","verifyOTP","resetPassword"],"sources":["C:/Users/yeez2/Desktop/CSS227/projects/MERN-bearbrick/client/src/helper/helper.js"],"sourcesContent":["import axios from 'axios';\r\nimport jwt_decode from 'jwt-decode';\r\n\r\n//axios.defaults.baseURL = process.env.REACT_APP_SERVER_DOMAIN;\r\n\r\n\r\n/** Make API Requests */\r\n\r\n\r\n/** To get username from Token */\r\nexport async function getUsername(){\r\n    const token = localStorage.getItem('token')\r\n    if(!token) return Promise.reject(\"Cannot find Token\");\r\n    let decode = jwt_decode(token)\r\n    return decode;\r\n}\r\n\r\n/** authenticate function */\r\nexport async function authenticate(username){\r\n    try {\r\n        return await axios.post('http://localhost:8080/api/authenticate', { username })\r\n    } catch (error) {\r\n        return { error : \"Username doesn't exist...!\"}\r\n    }\r\n}\r\n\r\n/** get User details */\r\nexport async function getUser({ username }){\r\n    try {\r\n        const { data } = await axios.get(`http://localhost:8080/api/user/${username}`);\r\n        return { data };\r\n    } catch (error) {\r\n        return { error : \"Password doesn't Match...!\"}\r\n    }\r\n}\r\n\r\n/** register user function */\r\nexport async function registerUser(credentials){\r\n    try {\r\n        console.log(\"check\")\r\n        console.log(credentials)\r\n        const { data : { msg }, status } = await axios.post(`http://localhost:8080/api/register`, credentials);\r\n        \r\n        let { username, email } = credentials;\r\n\r\n        /** send email */\r\n        if(status === 201){\r\n            await axios.post('http://localhost:8080/api/registerMail', { username, userEmail : email, text : msg})\r\n        }\r\n\r\n        return Promise.resolve(msg)\r\n    } catch (error) {\r\n        return Promise.reject({ error })\r\n    }\r\n}\r\n\r\n/** login function */\r\nexport async function verifyPassword({ username, password }){\r\n    try {\r\n        if(username){\r\n            console.log(\"check\")\r\n            const { data } = await axios.post('http://localhost:8080/api/login', { username, password })\r\n            return Promise.resolve({ data });\r\n        }\r\n    } catch (error) {\r\n        return Promise.reject({ error : \"Password doesn't Match...!\"})\r\n    }\r\n}\r\n\r\n/** update user profile function */\r\nexport async function updateUser(response){\r\n    try {\r\n        \r\n        const token = await localStorage.getItem('token');\r\n        const data = await axios.put('http://localhost:8080/api/updateuser', response, { headers : { \"Authorization\" : `Bearer ${token}`}});\r\n\r\n        return Promise.resolve({ data })\r\n    } catch (error) {\r\n        return Promise.reject({ error : \"Couldn't Update Profile...!\"})\r\n    }\r\n}\r\n\r\n/** generate OTP */\r\nexport async function generateOTP(username){\r\n    try {\r\n        const {data : { code }, status } = await axios.get('http://localhost:8080/api/generateOTP', { params : { username }});\r\n\r\n        // send mail with the OTP\r\n        if(status === 201){\r\n            let { data : { email }} = await getUser({ username });\r\n            let text = `Your Password Recovery OTP is ${code}. Verify and recover your password.`;\r\n            await axios.post('http://localhost:8080/api/registerMail', { username, userEmail: email, text, subject : \"Password Recovery OTP\"})\r\n        }\r\n        return Promise.resolve(code);\r\n    } catch (error) {\r\n        return Promise.reject({ error });\r\n    }\r\n}\r\n\r\n/** verify OTP */\r\nexport async function verifyOTP({ username, code }){\r\n    try {\r\n       const { data, status } = await axios.get('http://localhost:8080/api/verifyOTP', { params : { username, code }})\r\n       return { data, status }\r\n    } catch (error) {\r\n        return Promise.reject(error);\r\n    }\r\n}\r\n\r\n/** reset password */\r\nexport async function resetPassword({ username, password }){\r\n    try {\r\n        const { data, status } = await axios.put('http://localhost:8080/api/resetPassword', { username, password });\r\n        return Promise.resolve({ data, status})\r\n    } catch (error) {\r\n        return Promise.reject({ error })\r\n    }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}